{
  "openapi": "3.0.2",
  "info": {
    "title": "FastAPI",
    "version": "0.1.0"
  },
  "paths": {
    "/auth/jwt/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Auth:Jwt.Login",
        "operationId": "auth_jwt_login_auth_jwt_login_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_auth_jwt_login_auth_jwt_login_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BearerResponse"
                },
                "example": {
                  "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI",
                  "token_type": "bearer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "LOGIN_BAD_CREDENTIALS": {
                    "summary": "Bad credentials or the user is inactive.",
                    "value": {
                      "detail": "LOGIN_BAD_CREDENTIALS"
                    }
                  },
                  "LOGIN_USER_NOT_VERIFIED": {
                    "summary": "The user is not verified.",
                    "value": {
                      "detail": "LOGIN_USER_NOT_VERIFIED"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/jwt/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Auth:Jwt.Logout",
        "operationId": "auth_jwt_logout_auth_jwt_logout_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Missing token or inactive user."
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyCookie": []
          }
        ]
      }
    },
    "/auth/cookie/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Auth:Cookie.Login",
        "operationId": "auth_cookie_login_auth_cookie_login_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_auth_cookie_login_auth_cookie_login_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "LOGIN_BAD_CREDENTIALS": {
                    "summary": "Bad credentials or the user is inactive.",
                    "value": {
                      "detail": "LOGIN_BAD_CREDENTIALS"
                    }
                  },
                  "LOGIN_USER_NOT_VERIFIED": {
                    "summary": "The user is not verified.",
                    "value": {
                      "detail": "LOGIN_USER_NOT_VERIFIED"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/cookie/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Auth:Cookie.Logout",
        "operationId": "auth_cookie_logout_auth_cookie_logout_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Missing token or inactive user."
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyCookie": []
          }
        ]
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Register:Register",
        "operationId": "register_register_auth_register_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "REGISTER_USER_ALREADY_EXISTS": {
                    "summary": "A user with this email already exists.",
                    "value": {
                      "detail": "REGISTER_USER_ALREADY_EXISTS"
                    }
                  },
                  "REGISTER_INVALID_PASSWORD": {
                    "summary": "Password validation failed.",
                    "value": {
                      "detail": {
                        "code": "REGISTER_INVALID_PASSWORD",
                        "reason": "Password should beat least 3 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Reset:Forgot Password",
        "operationId": "reset_forgot_password_auth_forgot_password_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_reset_forgot_password_auth_forgot_password_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Reset:Reset Password",
        "operationId": "reset_reset_password_auth_reset_password_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_reset_reset_password_auth_reset_password_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "RESET_PASSWORD_BAD_TOKEN": {
                    "summary": "Bad or expired token.",
                    "value": {
                      "detail": "RESET_PASSWORD_BAD_TOKEN"
                    }
                  },
                  "RESET_PASSWORD_INVALID_PASSWORD": {
                    "summary": "Password validation failed.",
                    "value": {
                      "detail": {
                        "code": "RESET_PASSWORD_INVALID_PASSWORD",
                        "reason": "Password should be at least 3 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/request-verify-token": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Verify:Request-Token",
        "operationId": "verify_request_token_auth_request_verify_token_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_verify_request_token_auth_request_verify_token_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/verify": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Verify:Verify",
        "operationId": "verify_verify_auth_verify_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_verify_verify_auth_verify_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "VERIFY_USER_BAD_TOKEN": {
                    "summary": "Bad token, not existing user ornot the e-mail currently set for the user.",
                    "value": {
                      "detail": "VERIFY_USER_BAD_TOKEN"
                    }
                  },
                  "VERIFY_USER_ALREADY_VERIFIED": {
                    "summary": "The user is already verified.",
                    "value": {
                      "detail": "VERIFY_USER_ALREADY_VERIFIED"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/profile/{user_id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Profile",
        "description": "Get the public user profile",
        "operationId": "get_profile_users_profile__user_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyCookie": []
          }
        ]
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Users:Current User",
        "operationId": "users_current_user_users_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "401": {
            "description": "Missing token or inactive user."
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyCookie": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Users:Patch Current User",
        "operationId": "users_patch_current_user_users_me_patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "401": {
            "description": "Missing token or inactive user."
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "UPDATE_USER_EMAIL_ALREADY_EXISTS": {
                    "summary": "A user with this email already exists.",
                    "value": {
                      "detail": "UPDATE_USER_EMAIL_ALREADY_EXISTS"
                    }
                  },
                  "UPDATE_USER_INVALID_PASSWORD": {
                    "summary": "Password validation failed.",
                    "value": {
                      "detail": {
                        "code": "UPDATE_USER_INVALID_PASSWORD",
                        "reason": "Password should beat least 3 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyCookie": []
          }
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Users:User",
        "operationId": "users_user_users__id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Id"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "401": {
            "description": "Missing token or inactive user."
          },
          "403": {
            "description": "Not a superuser."
          },
          "404": {
            "description": "The user does not exist."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Users:Delete User",
        "operationId": "users_delete_user_users__id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Id"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "401": {
            "description": "Missing token or inactive user."
          },
          "403": {
            "description": "Not a superuser."
          },
          "404": {
            "description": "The user does not exist."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyCookie": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Users:Patch User",
        "operationId": "users_patch_user_users__id__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Id"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "401": {
            "description": "Missing token or inactive user."
          },
          "403": {
            "description": "Not a superuser."
          },
          "404": {
            "description": "The user does not exist."
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                },
                "examples": {
                  "UPDATE_USER_EMAIL_ALREADY_EXISTS": {
                    "summary": "A user with this email already exists.",
                    "value": {
                      "detail": "UPDATE_USER_EMAIL_ALREADY_EXISTS"
                    }
                  },
                  "UPDATE_USER_INVALID_PASSWORD": {
                    "summary": "Password validation failed.",
                    "value": {
                      "detail": {
                        "code": "UPDATE_USER_INVALID_PASSWORD",
                        "reason": "Password should beat least 3 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyCookie": []
          }
        ]
      }
    },
    "/ext/add": {
      "post": {
        "tags": [
          "Extensions"
        ],
        "summary": "Add Extension",
        "operationId": "add_extension_ext_add_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtensionInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Extension"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyCookie": []
          }
        ]
      }
    },
    "/ext/delete/{extension_id}": {
      "delete": {
        "tags": [
          "Extensions"
        ],
        "summary": "Delete Extension",
        "operationId": "delete_extension_ext_delete__extension_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Extension Id",
              "type": "integer"
            },
            "name": "extension_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Id",
                "type": "integer",
                "description": "ID of the extension"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Extension"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyCookie": []
          }
        ]
      }
    },
    "/ext/update/{extension_id}": {
      "patch": {
        "tags": [
          "Extensions"
        ],
        "summary": "Update Extension",
        "description": "Update an extension. Only the owner can do this. Only non-null fields will be updated.",
        "operationId": "update_extension_ext_update__extension_id__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Extension Id",
              "type": "integer"
            },
            "name": "extension_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtensionUpdateInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Extension"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyCookie": []
          }
        ]
      }
    },
    "/ext/list": {
      "get": {
        "tags": [
          "Extensions"
        ],
        "summary": "List Extensions",
        "operationId": "list_extensions_ext_list_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Skip",
              "type": "integer",
              "default": 0
            },
            "name": "skip",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Include extensions without any versions attached to them.",
            "required": false,
            "schema": {
              "title": "Include Unversioned",
              "type": "boolean",
              "description": "Include extensions without any versions attached to them.",
              "default": false
            },
            "name": "include_unversioned",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Extensions Ext List Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Extension"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ext/get/{extension_id}": {
      "get": {
        "tags": [
          "Extensions"
        ],
        "summary": "Get Extension",
        "operationId": "get_extension_ext_get__extension_id__get",
        "parameters": [
          {
            "description": "`id` (int) or `name` (string) of the extension",
            "required": true,
            "schema": {
              "title": "Extension Id",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "description": "`id` (int) or `name` (string) of the extension"
            },
            "name": "extension_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Extension"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/version/add/{extension_id}": {
      "post": {
        "tags": [
          "Versions"
        ],
        "summary": "Add a new version to an extension",
        "operationId": "add_extension_version_version_add__extension_id__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Extension Id",
              "type": "integer"
            },
            "name": "extension_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtensionVersionInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensionVersion"
                }
              }
            }
          },
          "409": {
            "description": "Version number already exists for this extension"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyCookie": []
          }
        ]
      }
    },
    "/version/delete/{version_id}": {
      "delete": {
        "tags": [
          "Versions"
        ],
        "summary": "Delete Extension Version",
        "operationId": "delete_extension_version_version_delete__version_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Version Id",
              "type": "integer"
            },
            "name": "version_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Description",
              "default": "Delete an extension"
            },
            "name": "description",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensionVersion"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyCookie": []
          }
        ]
      }
    },
    "/version/update/{version_id}": {
      "patch": {
        "tags": [
          "Versions"
        ],
        "summary": "Update a version.",
        "description": "Only the extension owner can do this. Only non-null fields will be updated.",
        "operationId": "update_extension_version_version_update__version_id__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Version Id",
              "type": "integer"
            },
            "name": "version_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtensionVersionUpdateInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensionVersion"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyCookie": []
          }
        ]
      }
    },
    "/version/download/{version_id}": {
      "get": {
        "tags": [
          "Versions"
        ],
        "summary": "Download a extension zip file for the given version",
        "operationId": "download_extension_version_file_version_download__version_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Version Id",
              "type": "integer"
            },
            "name": "version_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/version/upload/{version_id}": {
      "post": {
        "tags": [
          "Versions"
        ],
        "summary": "Upload a extension zip file for a version.",
        "operationId": "upload_extension_version_file_version_upload__version_id__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Version Id",
              "type": "integer"
            },
            "name": "version_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_extension_version_file_version_upload__version_id__post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionFile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyCookie": []
          }
        ]
      }
    },
    "/version/list/{extension_id}": {
      "get": {
        "tags": [
          "Versions"
        ],
        "summary": "List all versions for an extension",
        "operationId": "list_extensions_version_list__extension_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Extension Id",
              "type": "integer"
            },
            "name": "extension_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Skip",
              "type": "integer",
              "default": 0
            },
            "name": "skip",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Extensions Version List  Extension Id  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtensionVersion"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BearerResponse": {
        "title": "BearerResponse",
        "required": [
          "access_token",
          "token_type"
        ],
        "type": "object",
        "properties": {
          "access_token": {
            "title": "Access Token",
            "type": "string"
          },
          "token_type": {
            "title": "Token Type",
            "type": "string"
          }
        }
      },
      "Body_auth_cookie_login_auth_cookie_login_post": {
        "title": "Body_auth_cookie_login_auth_cookie_login_post",
        "required": [
          "username",
          "password"
        ],
        "type": "object",
        "properties": {
          "grant_type": {
            "title": "Grant Type",
            "pattern": "password",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "scope": {
            "title": "Scope",
            "type": "string",
            "default": ""
          },
          "client_id": {
            "title": "Client Id",
            "type": "string"
          },
          "client_secret": {
            "title": "Client Secret",
            "type": "string"
          }
        }
      },
      "Body_auth_jwt_login_auth_jwt_login_post": {
        "title": "Body_auth_jwt_login_auth_jwt_login_post",
        "required": [
          "username",
          "password"
        ],
        "type": "object",
        "properties": {
          "grant_type": {
            "title": "Grant Type",
            "pattern": "password",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "scope": {
            "title": "Scope",
            "type": "string",
            "default": ""
          },
          "client_id": {
            "title": "Client Id",
            "type": "string"
          },
          "client_secret": {
            "title": "Client Secret",
            "type": "string"
          }
        }
      },
      "Body_reset_forgot_password_auth_forgot_password_post": {
        "title": "Body_reset_forgot_password_auth_forgot_password_post",
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "title": "Email",
            "type": "string",
            "format": "email"
          }
        }
      },
      "Body_reset_reset_password_auth_reset_password_post": {
        "title": "Body_reset_reset_password_auth_reset_password_post",
        "required": [
          "token",
          "password"
        ],
        "type": "object",
        "properties": {
          "token": {
            "title": "Token",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          }
        }
      },
      "Body_upload_extension_version_file_version_upload__version_id__post": {
        "title": "Body_upload_extension_version_file_version_upload__version_id__post",
        "required": [
          "file"
        ],
        "type": "object",
        "properties": {
          "file": {
            "title": "File",
            "type": "string",
            "format": "binary"
          }
        }
      },
      "Body_verify_request_token_auth_request_verify_token_post": {
        "title": "Body_verify_request_token_auth_request_verify_token_post",
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "title": "Email",
            "type": "string",
            "format": "email"
          }
        }
      },
      "Body_verify_verify_auth_verify_post": {
        "title": "Body_verify_verify_auth_verify_post",
        "required": [
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "title": "Token",
            "type": "string"
          }
        }
      },
      "ErrorModel": {
        "title": "ErrorModel",
        "required": [
          "detail"
        ],
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            ]
          }
        }
      },
      "Extension": {
        "title": "Extension",
        "required": [
          "name",
          "owner"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Short name of the extension"
          },
          "description_short": {
            "title": "Description Short",
            "type": "string",
            "description": "A short description what the extension is about. Max characters: 140",
            "default": ""
          },
          "description_long": {
            "title": "Description Long",
            "type": "string",
            "description": "An elaborate description what the extension does",
            "default": ""
          },
          "id": {
            "title": "Id",
            "type": "integer",
            "description": "UUID of the extension"
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "description": "UUID of the extension owner"
          },
          "versions": {
            "title": "Versions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionVersion"
            },
            "default": []
          }
        }
      },
      "ExtensionInput": {
        "title": "ExtensionInput",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Short name of the extension"
          },
          "description_short": {
            "title": "Description Short",
            "type": "string",
            "description": "A short description what the extension is about. Max characters: 140",
            "default": ""
          },
          "description_long": {
            "title": "Description Long",
            "type": "string",
            "description": "An elaborate description what the extension does",
            "default": ""
          }
        }
      },
      "ExtensionUpdateInput": {
        "title": "ExtensionUpdateInput",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Short name of the extension"
          },
          "description_short": {
            "title": "Description Short",
            "type": "string",
            "description": "A short description what the extension is about. Max characters: 140"
          },
          "description_long": {
            "title": "Description Long",
            "type": "string",
            "description": "An elaborate description what the extension does"
          }
        }
      },
      "ExtensionVersion": {
        "title": "ExtensionVersion",
        "required": [
          "major",
          "minor",
          "patch",
          "semver",
          "id",
          "extension_id",
          "is_latest"
        ],
        "type": "object",
        "properties": {
          "major": {
            "title": "Major",
            "type": "integer"
          },
          "minor": {
            "title": "Minor",
            "type": "integer"
          },
          "patch": {
            "title": "Patch",
            "type": "integer"
          },
          "note": {
            "title": "Note",
            "type": "string",
            "default": ""
          },
          "status": {
            "title": "Status",
            "type": "integer",
            "description": "\n        0: `draft` - For testing, not yet released, only visible to extension admins.\n        1: `private` - Released, but for visible testers only.\n        2: `public` - For public consumption.\n        3: `deprecated` - No longer recommended for use.\n        4: `withdrawn` - No longer available for use. Use a different version.\n        ",
            "default": 0
          },
          "semver": {
            "title": "Semver",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "extension_id": {
            "title": "Extension Id",
            "type": "integer"
          },
          "is_latest": {
            "title": "Is Latest",
            "type": "boolean"
          },
          "If this version has a file attached to it. A version must have an source file to publish it officially.": {
            "title": "If This Version Has A File Attached To It. A Version Must Have An Source File To Publish It Officially.",
            "type": "string"
          }
        }
      },
      "ExtensionVersionInput": {
        "title": "ExtensionVersionInput",
        "required": [
          "major",
          "minor",
          "patch"
        ],
        "type": "object",
        "properties": {
          "major": {
            "title": "Major",
            "type": "integer"
          },
          "minor": {
            "title": "Minor",
            "type": "integer"
          },
          "patch": {
            "title": "Patch",
            "type": "integer"
          },
          "note": {
            "title": "Note",
            "type": "string",
            "default": ""
          },
          "status": {
            "title": "Status",
            "type": "integer",
            "description": "\n        0: `draft` - For testing, not yet released, only visible to extension admins.\n        1: `private` - Released, but for visible testers only.\n        2: `public` - For public consumption.\n        3: `deprecated` - No longer recommended for use.\n        4: `withdrawn` - No longer available for use. Use a different version.\n        ",
            "default": 0
          }
        }
      },
      "ExtensionVersionUpdateInput": {
        "title": "ExtensionVersionUpdateInput",
        "required": [
          "major",
          "minor",
          "patch",
          "note"
        ],
        "type": "object",
        "properties": {
          "major": {
            "title": "Major",
            "type": "integer"
          },
          "minor": {
            "title": "Minor",
            "type": "integer"
          },
          "patch": {
            "title": "Patch",
            "type": "integer"
          },
          "note": {
            "title": "Note",
            "type": "string"
          },
          "status": {
            "title": "Status",
            "type": "integer",
            "description": "\n        0: `draft` - For testing, not yet released, only visible to extension admins.\n        1: `private` - Released, but for visible testers only.\n        2: `public` - For public consumption.\n        3: `deprecated` - No longer recommended for use.\n        4: `withdrawn` - No longer available for use. Use a different version.\n        ",
            "default": 0
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "UserCreate": {
        "title": "UserCreate",
        "required": [
          "email",
          "password",
          "display_name"
        ],
        "type": "object",
        "properties": {
          "email": {
            "title": "Email",
            "type": "string",
            "format": "email"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "is_active": {
            "title": "Is Active",
            "type": "boolean",
            "default": true
          },
          "is_superuser": {
            "title": "Is Superuser",
            "type": "boolean",
            "default": false
          },
          "is_verified": {
            "title": "Is Verified",
            "type": "boolean",
            "default": false
          },
          "display_name": {
            "title": "Display Name",
            "maxLength": 32,
            "minLength": 3,
            "type": "string",
            "description": "Display name of the user"
          }
        }
      },
      "UserProfile": {
        "title": "UserProfile",
        "required": [
          "id",
          "is_active",
          "display_name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "UUID of the user",
            "format": "uuid"
          },
          "is_active": {
            "title": "Is Active",
            "type": "boolean",
            "description": "Is the user active"
          },
          "display_name": {
            "title": "Display Name",
            "maxLength": 32,
            "minLength": 3,
            "type": "string",
            "description": "Display name of the user"
          }
        }
      },
      "UserRead": {
        "title": "UserRead",
        "required": [
          "id",
          "email",
          "display_name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "UUID of the user",
            "format": "uuid"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "format": "email"
          },
          "is_active": {
            "title": "Is Active",
            "type": "boolean",
            "default": true
          },
          "is_superuser": {
            "title": "Is Superuser",
            "type": "boolean",
            "default": false
          },
          "is_verified": {
            "title": "Is Verified",
            "type": "boolean",
            "default": false
          },
          "display_name": {
            "title": "Display Name",
            "maxLength": 32,
            "minLength": 3,
            "type": "string",
            "description": "Display name of the user"
          }
        },
        "description": "Base User model."
      },
      "UserUpdate": {
        "title": "UserUpdate",
        "required": [
          "display_name"
        ],
        "type": "object",
        "properties": {
          "password": {
            "title": "Password",
            "type": "string"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "format": "email"
          },
          "is_active": {
            "title": "Is Active",
            "type": "boolean"
          },
          "is_superuser": {
            "title": "Is Superuser",
            "type": "boolean"
          },
          "is_verified": {
            "title": "Is Verified",
            "type": "boolean"
          },
          "display_name": {
            "title": "Display Name",
            "maxLength": 32,
            "minLength": 3,
            "type": "string",
            "description": "Display name of the user"
          }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "VersionFile": {
        "title": "VersionFile",
        "required": [
          "id",
          "file_name",
          "version_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "UUID of the extension"
          },
          "file_name": {
            "title": "File Name",
            "type": "string",
            "description": "Original filename"
          },
          "version_id": {
            "title": "Version Id",
            "type": "integer",
            "description": "ID of the version this file belongs to"
          }
        }
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "auth/jwt/login"
          }
        }
      },
      "APIKeyCookie": {
        "type": "apiKey",
        "in": "cookie",
        "name": "fastapiusersauth"
      }
    }
  }
}